#
# Copyright 2014 Chef Software, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

module Omnibus
  module Packager
    class DancePackageType
    end
    include Logging
    include Sugarable

    autoload :BFF,      'omnibus/packagers/bff'
    autoload :DEB,      'omnibus/packagers/deb'
    autoload :Makeself, 'omnibus/packagers/makeself'
    autoload :MSI,      'omnibus/packagers/msi'
    autoload :APPX,     'omnibus/packagers/appx'
    autoload :PKG,      'omnibus/packagers/pkg'
    autoload :Solaris,  'omnibus/packagers/solaris'
    autoload :IPS,      'omnibus/packagers/ips'
    autoload :RPM,      'omnibus/packagers/rpm'

    class Platform

      PLATFORM_PACKAGER_MAP = {
        'debian'   => 'deb',
        'fedora'   => 'rpm',
        'suse'     => 'rpm',
        'rhel'     => 'rpm',
        'wrlinux'  => 'rpm',
        'aix'      => 'bff',
        'mac_os_x' => 'pkg'
      }

      def initialize(platform_information, platform_packager_map = nil)
        @platform_info = platform_information
        # Only used for autogenerated classes
        @platform_packager_map = platform_packager_map
      end

      def self.create(platform_information, platform_packager_map = PLATFORM_PACKAGER_MAP)
        platform_name = platform_information['platform_family']

        # Autogenerate the requested platform class if it just supports a single packager
        if platform_packager_map.has_key?(platform_name)
          create_class(platform_name)
        end

        begin
          name = Packager.const_get(class_name(platform_name))
        rescue NameError
          name = DefaultPlatform
        end
        name.new(platform_information, platform_packager_map)
      end

      # This function should be overritten by its child class
      def supported_packagers
        raise Exception.new("Not implimented")
      end

      # Only relevant to the auto-generated classes
      def packager
        @platform_packager_map[@platform_info['platform_family']]
      end

      def satisfies_version_constraint?(version_constraint)
        version = @platform_info['platform_version']
        Chef::Sugar::Constraints::Version.new(version).satisfies?(version_constraint)
      end

      private
      def self.class_name(platform_name)
        "#{platform_name.capitalize}Platform"
      end

      def self.create_class(platform_name)
        klass = Class.new(Platform) do
          require 'omnibus/packagers/base'
          def supported_packagers
            require "omnibus/packagers/#{packager}"
            [Packager.const_get(packager.upcase)]
          end
        end
        Packager.const_set class_name(platform_name), klass
      end

    end

    class DefaultPlatform < Platform
      include Logging
      require 'omnibus/packagers/base'
      require 'omnibus/packagers/makeself'

      def supported_packagers
        platform = @platform_info['platform_family']
        log.warn(log_key) do
          "Could not determine packager for `#{platform}', defaulting to `makeself'!"
        end

        [Makeself]
      end
    end

    class Solaris2Platform < Platform
      require 'omnibus/packagers/base'
      require 'omnibus/packagers/solaris'
      require 'omnibus/packagers/ips'

      def supported_packagers
        return [IPS] if satisfies_version_constraint?('>= 5.11')
        return [Solaris] if satisfies_version_constraint?('>= 5.10')
        #TODO Determine how to handle Versions under 5.10
      end
    end

    class WindowsPlatform < Platform
      require 'omnibus/packagers/base'
      require 'omnibus/packagers/msi'
      require 'omnibus/packagers/APPX'

      def supported_packagers
        return [MSI, APPX] if satisfies_version_constraint?('>= 6.2')
        [MSI]
      end
    end

    #
    # The list of Ohai platform families mapped to the respective packager
    # class.
    #
    # @return [Hash<String, Class>]
    #
    PLATFORM_PACKAGER_MAP = {
      "debian"   => DEB,
      "fedora"   => RPM,
      "suse"     => RPM,
      "rhel"     => RPM,
      "wrlinux"  => RPM,
      "aix"      => BFF,
      "solaris"  => Solaris,
      "ips"      => IPS,
      "windows"  => [MSI, APPX],
      "mac_os_x" => PKG,
    }.freeze

    #
    # Determine the packager(s) for the current system. This method returns the
    # class, not an instance of the class.
    #
    # @example
    #   Packager.for_current_system #=> [Packager::RPM]
    #
    # @return [[~Packager::Base]]
    #
    def for_current_system
      family = Ohai['platform_family']
      version = Ohai['platform_version']
      return Platform.create(Ohai).supported_packagers

      if family == "solaris2" && Chef::Sugar::Constraints::Version.new(version).satisfies?(">= 5.11")
        family = "ips"
      elsif family == "solaris2" && Chef::Sugar::Constraints::Version.new(version).satisfies?(">= 5.10")
        family = "solaris"
      end
      if klass = PLATFORM_PACKAGER_MAP[family]
        package_types = klass.is_a?(Array) ? klass : [ klass ]

        if package_types.include?(APPX) &&
            !Chef::Sugar::Constraints::Version.new(version).satisfies?(">= 6.2")
          log.warn(log_key) { "APPX generation is only supported on Windows versions 2012 and above" }
          package_types = package_types - [APPX]
        end

        package_types
      else
        log.warn(log_key) do
          "Could not determine packager for `#{family}', defaulting " \
          "to `makeself'!"
        end
        [Makeself]
      end
    end
    module_function :for_current_system
  end
end
